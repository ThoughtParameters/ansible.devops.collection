# .github/workflows/release.yml
name: Create Ansible Collection Release üöÄ

# This workflow is triggered manually from the GitHub Actions UI
on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Type of version bump (major, minor, patch)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - initial
        default: "patch"

# Permissions required for committing, tagging, and creating a release
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name:  checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags for version calculation
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install antsibull-changelog PyYAML

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: ‚öôÔ∏è Calculate New Version
        id: versioning
        run: |
          # This script reads galaxy.yml, gets the current version, and bumps it
          # based on the workflow input (major, minor, or patch).
          # It outputs the new version number for subsequent steps.
          python << EOF
          import yaml
          import os

          bump_type = "${{ github.event.inputs.version_bump }}"
          
          with open('galaxy.yml', 'r') as f:
              galaxy_data = yaml.safe_load(f)

          current_version = galaxy_data['version']
          major, minor, patch = map(int, current_version.split('.'))

          if bump_type == 'major':
              major += 1
              minor = 0
              patch = 0
          elif bump_type == 'minor':
              minor += 1
              patch = 0
          elif bump_type == 'patch': # patch
              patch += 1
          else: # initial
              if current_version != '0.0.0':
                  raise ValueError("Initial version bump can only be done from version 0.0.0")
              else:
                  major, minor, patch = 0, 0, 1
          
          new_version = f"{major}.{minor}.{patch}"
          galaxy_data['version'] = new_version

          with open('galaxy.yml', 'w') as f:
              yaml.dump(galaxy_data, f)
          
          print(f"Current version: {current_version}")
          print(f"New version: {new_version}")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as hf:
              print(f'new_version={new_version}', file=hf)
          EOF

      - name: üìú Generate Changelog
        run: antsibull-changelog release --version ${{ steps.versioning.outputs.new_version }}

      - name: üì¶ Build Ansible Collection
        id: build
        run: |
          # Build the collection tarball
          ansible-galaxy collection build
          
          # Find the generated tarball name and save it as an output
          TARBALL_NAME=$(find . -name "*.tar.gz")
          echo "tarball_name=${TARBALL_NAME}" >> $GITHUB_OUTPUT

      - name: Commit, Tag, and Push Changes
        run: |
          git add galaxy.yml changelogs/changelog.yaml CHANGELOG.md CHANGELOG.rst .changelogs/fragments/
          git commit -m "chore(release): Release version ${{ steps.versioning.outputs.new_version }}"
          git tag "v${{ steps.versioning.outputs.new_version }}"
          git push
          git push --tags

      - name: Î¶¥Î¶¨Ïä§ ÎßåÎì§Í∏∞
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.versioning.outputs.new_version }}"
          # Get the content for the new release from the changelog file
          body_path: CHANGELOG.md
          files: "${{ steps.build.outputs.tarball_name }}"